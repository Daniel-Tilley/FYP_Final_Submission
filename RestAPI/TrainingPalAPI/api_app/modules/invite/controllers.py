from flask import Blueprint, request
from flask import json

from api_app.dao.invite_dao import InviteDao
from api_app.models.invite import Invite
from api_app.decorators.decorators import Decorators
from api_app.helpers.response_helper import ResponseHelper
from api_app.models.update_data import UpdateData
from api_app.constants.request import RequestConstants
from api_app.constants.database.invites_table import InvitesTable
from api_app.models.update_invite_data import UpdateInviteData

mod_invite = Blueprint('invites', __name__, url_prefix='/invites')


@mod_invite.route("/single", methods=['POST'])
@Decorators.TokenRequired
def CreateSingleInvite(current_user, user_type):

    if not request.data:
        return ResponseHelper.ReturnBadRequestResponse()

    else:
        request_data = json.loads(request.data)

        invite = Invite(
            None,  # For Id that is auto generated by a trigger
            request_data[str(InvitesTable.INVITE_TYPE)],
            current_user,  # Ensure log is created for the current user,
            request_data[str(InvitesTable.SENT_TO)],
            request_data[str(InvitesTable.STATUS)],
            request_data[str(InvitesTable.SEND_DATE)],
            request_data[str(InvitesTable.EVENT_ID)]
        )

        invite_dao = InviteDao()

        if invite_dao.CreateSingleInvite(invite):

            return ResponseHelper.ReturnCreatedResponse("Invite Created")

        else:

            return ResponseHelper.ReturnConflictResponse("Unable to Create Invite!")


@mod_invite.route("/multiple", methods=['POST'])
@Decorators.TokenRequired
def CreateMultipleInvites(current_user, user_type):
    if not request.data:
        return ResponseHelper.ReturnBadRequestResponse()

    else:
        request_data = json.loads(request.data)

        invite = Invite(
            None,  # For Id that is auto generated by a trigger
            request_data[str(InvitesTable.INVITE_TYPE)],
            current_user,  # Ensure log is created for the current user,
            None,
            request_data[str(InvitesTable.STATUS)],
            request_data[str(InvitesTable.SEND_DATE)],
            request_data[str(InvitesTable.EVENT_ID)]
        )

        recipients = request_data["Recipients"]

        invite_dao = InviteDao()

        if invite_dao.CreateMultipleInvites(invite, recipients):

            return ResponseHelper.ReturnCreatedResponse("Invites Created")

        else:

            return ResponseHelper.ReturnConflictResponse("Unable to Create Invites!")


@mod_invite.route("/single/<invite_id>", methods=['PUT'])
@Decorators.TokenRequired
def UpdateSingleInvite(current_user, user_type, invite_id):
    invite_check_dao = InviteDao()

    if invite_check_dao.CanEditOrDelete(current_user, invite_id):

        if not request.data:
            return ResponseHelper.ReturnBadRequestResponse()

        else:
            request_data = json.loads(request.data)

            update_data = UpdateData(
                request_data[RequestConstants.UPDATE_REQUEST_MEMBER_KEYS],
                request_data[RequestConstants.UPDATE_REQUEST_MEMBER_VALUES],
                [InvitesTable.ID],
                [invite_id]
            )

            if InvitesTable.ID in update_data.memberKeys:

                return ResponseHelper.ReturnBadRequestResponse()

            if InvitesTable.SENT_BY in update_data.memberKeys:
                return ResponseHelper.ReturnBadRequestResponse()

            if InvitesTable.SENT_TO in update_data.memberKeys:
                return ResponseHelper.ReturnBadRequestResponse()

            invite_dao = InviteDao()

            if invite_dao.UpdateSingleInvite(update_data):
                return ResponseHelper.ReturnOkResponse("Invite Updated")

            else:
                return ResponseHelper.ReturnConflictResponse("Unable to Update Invite!")

    else:

        return ResponseHelper.ReturnBadRequestResponse()


@mod_invite.route("/multiple", methods=['PUT'])
@Decorators.TokenRequired
def UpdateMultipleInvite(current_user, user_type):

    if not request.data:
        return ResponseHelper.ReturnBadRequestResponse()

    else:
        request_data = json.loads(request.data)

        update_data = UpdateInviteData(
            request_data[RequestConstants.UPDATE_REQUEST_MEMBER_KEYS],
            request_data[RequestConstants.UPDATE_REQUEST_MEMBER_VALUES],
            len(request_data[RequestConstants.UPDATE_REQUEST_MEMBER_VALUES]),
            request_data["Invite_Ids"],
            None,
            None
        )

        invite_check_dao = InviteDao()

        if invite_check_dao.CanEditOrDeleteMultiple(current_user, update_data.inviteIds):

            if InvitesTable.ID in update_data.memberKeys:

                return ResponseHelper.ReturnBadRequestResponse()

            if InvitesTable.SENT_BY in update_data.memberKeys:

                return ResponseHelper.ReturnBadRequestResponse()

            if InvitesTable.SENT_TO in update_data.memberKeys:

                return ResponseHelper.ReturnBadRequestResponse()

            invite_dao = InviteDao()

            if invite_dao.UpdateMultipleInvites(update_data):
                return ResponseHelper.ReturnOkResponse("Invite Updated")

            else:
                return ResponseHelper.ReturnConflictResponse("Unable to Update Invite!")

        else:

            return ResponseHelper.ReturnBadRequestResponse()


@mod_invite.route("/<invite_id>", methods=['DELETE'])
@Decorators.TokenRequired
def DeleteInvite(current_user, user_type, invite_id):

    invite_check_dao = InviteDao()

    if invite_check_dao.CanEditOrDelete(current_user, invite_id):

        invite_dao = InviteDao()

        if invite_dao.DeclineInvite(invite_id):
            return ResponseHelper.ReturnOkResponse("Invite Declined")

        else:
            return ResponseHelper.ReturnConflictResponse("Unable to Decline Invite!")

    else:

        return ResponseHelper.ReturnBadRequestResponse()


@mod_invite.route("/<invite_status_type>", methods=['GET'])
@Decorators.TokenRequired
def GetInvites(current_user, user_type, invite_status_type):

    invite_type = request.args.get('type')

    invite_types = ["one-one", "vid-con", "coa-dat", "ath-dat"]

    if not invite_status_type:
        return ResponseHelper.ReturnBadRequestResponse()

    if not invite_type or invite_type not in invite_types:

        if invite_status_type == "sent" or invite_status_type == "received":

            invite_dao = InviteDao()
            invites = invite_dao.GetInvites(current_user, invite_status_type)

            if invites:
                return ResponseHelper.ReturnOkDataResponse(
                    "Request OK",
                    {"Invites": invites}
                )

            else:
                return ResponseHelper.ReturnNotFoundResponse("No Invites Found!")

        elif invite_status_type == "new":

            invite_dao = InviteDao()
            count = invite_dao.GetNewInvitesCount(current_user)

            if count:
                return ResponseHelper.ReturnOkDataResponse(
                    "Request OK",
                    count
                )

            else:
                return ResponseHelper.ReturnOkDataResponse(
                    "Request OK",
                    0
                )

        else:
            return ResponseHelper.ReturnBadRequestResponse()

    else:

        if invite_status_type == "sent" or invite_status_type == "received":

            if invite_type == "ath-dat" and user_type != RequestConstants.USER_TYPE_ATH:
                return ResponseHelper.ReturnBadRequestResponse()

            if invite_type == "coa-dat" and user_type != RequestConstants.USER_TYPE_COA:
                return ResponseHelper.ReturnBadRequestResponse()

            invite_dao = InviteDao()
            invites = invite_dao.GetInvites(current_user, invite_status_type, (invite_types.index(invite_type) + 1))

            if invites:
                return ResponseHelper.ReturnOkDataResponse(
                    "Request OK",
                    {"Invites": invites}
                )

            else:
                return ResponseHelper.ReturnNotFoundResponse("No Invites Found!")

        else:

            return ResponseHelper.ReturnBadRequestResponse()
