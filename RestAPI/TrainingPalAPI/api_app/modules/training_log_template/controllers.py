from flask import Blueprint, request
from flask import json

from api_app.dao.training_log_template_dao import TrainingLogTemplateDao
from api_app.models.training_log_template import TrainingLogTemplate
from api_app.decorators.decorators import Decorators
from api_app.helpers.response_helper import ResponseHelper
from api_app.models.update_data import UpdateData
from api_app.constants.request import RequestConstants
from api_app.constants.database.training_log_template_table import TrainingLogTemplateTable

mod_training_log_template = Blueprint('training_log_templates', __name__, url_prefix='/templates')


@mod_training_log_template.route("/<user_id>", methods=['POST'])
@Decorators.TokenRequired
def CreateTemplate(current_user, user_type, user_id):

    if current_user != user_id:
        return ResponseHelper.ReturnBadRequestResponse()

    if user_type != RequestConstants.USER_TYPE_COA:
        return ResponseHelper.ReturnBadRequestResponse()

    if not request.data:
        return ResponseHelper.ReturnBadRequestResponse()

    else:
        training_log_data = json.loads(request.data)

        template = TrainingLogTemplate(
            None,  # For Id that is auto generated by a trigger
            user_id,  # Ensure log is created for the current user,
            training_log_data[str(TrainingLogTemplateTable.NAME)],
            training_log_data[str(TrainingLogTemplateTable.DURATION_PLANNED)],
            training_log_data[str(TrainingLogTemplateTable.DURATION_ACTUAL)],
            training_log_data[str(TrainingLogTemplateTable.DISTANCE_PLANNED)],
            training_log_data[str(TrainingLogTemplateTable.DISTANCE_ACTUAL)],
            training_log_data[str(TrainingLogTemplateTable.DISTANCE_UNIT)],
            training_log_data[str(TrainingLogTemplateTable.HR_RESTING_PLANNED)],
            training_log_data[str(TrainingLogTemplateTable.HR_AVG_PLANNED)],
            training_log_data[str(TrainingLogTemplateTable.HR_MAX_PLANNED)],
            training_log_data[str(TrainingLogTemplateTable.HR_RESTING_ACTUAL)],
            training_log_data[str(TrainingLogTemplateTable.HR_AVG_ACTUAL)],
            training_log_data[str(TrainingLogTemplateTable.HR_MAX_ACTUAL)],
            training_log_data[str(TrainingLogTemplateTable.WATTS_AVG_PLANNED)],
            training_log_data[str(TrainingLogTemplateTable.WATTS_MAX_PLANNED)],
            training_log_data[str(TrainingLogTemplateTable.WATTS_AVG_ACTUAL)],
            training_log_data[str(TrainingLogTemplateTable.WATTS_MAX_ACTUAL)],
            training_log_data[str(TrainingLogTemplateTable.RPE_PLANNED)],
            training_log_data[str(TrainingLogTemplateTable.RPE_ACTUAL)],
            training_log_data[str(TrainingLogTemplateTable.HR_ZONE1_TIME)],
            training_log_data[str(TrainingLogTemplateTable.HR_ZONE2_TIME)],
            training_log_data[str(TrainingLogTemplateTable.HR_ZONE3_TIME)],
            training_log_data[str(TrainingLogTemplateTable.HR_ZONE4_TIME)],
            training_log_data[str(TrainingLogTemplateTable.HR_ZONE5_TIME)],
            training_log_data[str(TrainingLogTemplateTable.HR_ZONE6_TIME)]
        )

        training_log_template_dao = TrainingLogTemplateDao()

        if training_log_template_dao.CreateTrainingLogTemplate(template):

            return ResponseHelper.ReturnCreatedResponse("Template Created")

        else:

            return ResponseHelper.ReturnConflictResponse("Unable to Create Template!")


@mod_training_log_template.route("/<user_id>/<template_id>", methods=['PUT'])
@Decorators.TokenRequired
def UpdateTemplate(current_user, user_type, user_id, template_id):

    if current_user != user_id:
        return ResponseHelper.ReturnBadRequestResponse()

    if user_type != RequestConstants.USER_TYPE_COA:
        return ResponseHelper.ReturnBadRequestResponse()

    if not request.data:
        return ResponseHelper.ReturnBadRequestResponse()

    else:
        request_data = json.loads(request.data)

        update_data = UpdateData(
            request_data[RequestConstants.UPDATE_REQUEST_MEMBER_KEYS],
            request_data[RequestConstants.UPDATE_REQUEST_MEMBER_VALUES],
            [TrainingLogTemplateTable.ID, TrainingLogTemplateTable.COACH_ID],
            [template_id, user_id]
        )

        if TrainingLogTemplateTable.ID in update_data.memberKeys:

            return ResponseHelper.ReturnBadRequestResponse()

        if TrainingLogTemplateTable.COACH_ID in update_data.memberKeys:

            return ResponseHelper.ReturnBadRequestResponse()

        training_log_template_dao = TrainingLogTemplateDao()

        if training_log_template_dao.UpdateTrainingLogTemplate(update_data):
            return ResponseHelper.ReturnOkResponse("Template Updated")

        else:
            return ResponseHelper.ReturnConflictResponse("Unable to Update Template!")


@mod_training_log_template.route("/<user_id>/<template_id>", methods=['DELETE'])
@Decorators.TokenRequired
def DeleteTemplate(current_user, user_type, user_id, template_id):

    if current_user != user_id:
        return ResponseHelper.ReturnBadRequestResponse()

    if user_type != RequestConstants.USER_TYPE_COA:
        return ResponseHelper.ReturnBadRequestResponse()

    training_log_template_dao = TrainingLogTemplateDao()

    if training_log_template_dao.DeleteTrainingLogTemplate(user_id, template_id):
        return ResponseHelper.ReturnOkResponse("Template Deleted")

    else:
        return ResponseHelper.ReturnConflictResponse("Unable to Delete Template!")


@mod_training_log_template.route("/<user_id>/<template_id>", methods=['GET'])
@Decorators.TokenRequired
def GetTemplateById(current_user, user_type, user_id, template_id):

    if current_user != user_id:
        return ResponseHelper.ReturnBadRequestResponse()

    if user_type != RequestConstants.USER_TYPE_COA:
        return ResponseHelper.ReturnBadRequestResponse()

    if not template_id:
        return ResponseHelper.ReturnBadRequestResponse()

    training_log_template_dao = TrainingLogTemplateDao()
    template = training_log_template_dao.GetTemplateById(template_id, user_id)

    if template:
        return ResponseHelper.ReturnOkDataResponse(
            "Request OK",
            {"Template": template}
        )

    else:
        return ResponseHelper.ReturnNotFoundResponse("Template Not Found!")


@mod_training_log_template.route("/<user_id>", methods=['GET'])
@Decorators.TokenRequired
def GetTemplates(current_user, user_type, user_id):

    if current_user != user_id:
        return ResponseHelper.ReturnBadRequestResponse()

    if user_type != RequestConstants.USER_TYPE_COA:
        return ResponseHelper.ReturnBadRequestResponse()

    training_log_template_dao = TrainingLogTemplateDao()
    templates = training_log_template_dao.GetTemplates(user_id)

    if templates:
        return ResponseHelper.ReturnOkDataResponse(
            "Request OK",
            {"Templates": templates}
        )

    else:
        return ResponseHelper.ReturnNotFoundResponse("No Templates Found!")


